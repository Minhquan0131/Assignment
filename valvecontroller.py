# -*- coding: utf-8 -*-
"""ValveController.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WnUBou_RJr0mRIp_1K2XCKsi21vBwToc
"""

import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl

# New Antecedent/Consequent objects hold universe variables and membership
# functions
current_level = ctrl.Antecedent(np.arange(-30,30, 0.1), 'level')
water_out = ctrl.Antecedent(np.arange(-25,25, 0.1), 'water_out')
valve = ctrl.Consequent(np.arange(0, 100, 1), 'valve')

current_level.automf(3)
water_out.automf(3)

valve['low'] = fuzz.trimf(valve.universe,[-15,-10,0])
valve['medium'] = fuzz.trimf(valve.universe, [0, 10, 15])
valve['high'] = fuzz.trimf(valve.universe, [15, 20, 25])
rule1 = ctrl.Rule(current_level['poor'] | water_out['poor'], valve['low'])
rule2 = ctrl.Rule(current_level['average']|water_out['average'], valve['medium'])
rule3 = ctrl.Rule(current_level['good']|water_out['good'], valve['high'])


Valve_ctrl = ctrl.ControlSystem([rule1, rule2, rule3])
Valve = ctrl.ControlSystemSimulation(Valve_ctrl)
Valve.input['current_level'] = 10
Valve.input['water_out'] = 1

# Crunch the numbers
Valve.compute()

valve.view(sim=Valve)

pip install scikit-fuzzy